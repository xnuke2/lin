#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

int shared_var = 10;  // Общая переменная
sem_t semaphore;       // Семафор для синхронизации

// Поток 1: Умножает shared_var на 2
void* thread_double(void* arg) {
    while (1) {
        sem_wait(&semaphore);  // Захватываем семафор
        printf("[Поток 1] До: %d → ", shared_var);
        shared_var *= 2;
        printf("После: %d\n", shared_var);
        sem_post(&semaphore);  // Освобождаем семафор
        sleep(1);  // Пауза для наглядности
    }
    return NULL;
}

// Поток 2: Вычитает 2 из shared_var
void* thread_subtract(void* arg) {
    while (1) {
        sem_wait(&semaphore);  // Захватываем семафор
        printf("[Поток 2] До: %d → ", shared_var);
        shared_var -= 2;
        printf("После: %d\n", shared_var);
        sem_post(&semaphore);  // Освобождаем семафор
        sleep(1);  // Пауза для наглядности
    }
    return NULL;
}

int main() {
    pthread_t t1, t2;

    // Инициализируем семафор (1 = доступен)
    sem_init(&semaphore, 0, 1);

    // Создаём потоки
    pthread_create(&t1, NULL, thread_double, NULL);
    pthread_create(&t2, NULL, thread_subtract, NULL);

    // Ждём завершения (хотя потоки бесконечные)
    pthread_join(t1, NULL);
    pthread_join(t2, NULL);

    sem_destroy(&semaphore);  // Уничтожаем семафор
    return 0;
}