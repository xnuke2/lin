#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 12345
#define BUFFER_SIZE 1024

int main() {
    int client_fd;
    struct sockaddr_in server_addr;
    char buffer[BUFFER_SIZE];

    // Создание сокета
    if ((client_fd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("Ошибка создания сокета");
        exit(EXIT_FAILURE);
    }

    // Настройка адреса сервера
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(PORT);
    if (inet_pton(AF_INET, "127.0.0.1", &server_addr.sin_addr) <= 0) {
        perror("Ошибка настройки адреса");
        close(client_fd);
        exit(EXIT_FAILURE);
    }

    // Подключение к серверу
    if (connect(client_fd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("Ошибка подключения");
        close(client_fd);
        exit(EXIT_FAILURE);
    }

    printf("Подключение к серверу установлено.\n");

    // Обмен сообщениями
    while (1) {
        printf("Введите сообщение: ");
        fgets(buffer, BUFFER_SIZE, stdin);
        buffer[strcspn(buffer, "\n")] = 0; // Удаление символа новой строки

        // Отправка сообщения серверу
        send(client_fd, buffer, strlen(buffer), 0);

        // Получение ответа от сервера
        memset(buffer, 0, BUFFER_SIZE);
        ssize_t bytes_received = recv(client_fd, buffer, BUFFER_SIZE, 0);
        if (bytes_received <= 0) {
            printf("Сервер отключился.\n");
            break;
        }

        printf("Ответ сервера: %s\n", buffer);
    }

    close(client_fd);
    printf("Клиент завершил работу.\n");

    return 0;
}