#include <stdio.h>
#include <dirent.h>
#include <sys/stat.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>

#define MAX_FILENAME_LEN 256
#define BUFFER_SIZE 1024

int main() {
    DIR *dir;
    struct dirent *entry;
    struct stat file_stat;
    char filename[MAX_FILENAME_LEN];
    char buffer[BUFFER_SIZE];
    int fd;
    ssize_t bytes_read;

    // 1. Просмотр содержимого текущего каталога
    printf("Содержимое текущего каталога:\n");
    dir = opendir(".");
    if (dir == NULL) {
        perror("Ошибка открытия каталога");
        return 1;
    }

    while ((entry = readdir(dir)) != NULL) {
        printf("%s\n", entry->d_name);
    }
    closedir(dir);

    // 2. Ввод имени файла с клавиатуры
    printf("\nВведите имя файла: ");
    if (fgets(filename, MAX_FILENAME_LEN, stdin) == NULL) {
        perror("Ошибка чтения ввода");
        return 1;
    }

    // Удаляем символ новой строки
    filename[strcspn(filename, "\n")] = '\0';

    // 3. Проверка существования файла и его размера
    if (stat(filename, &file_stat) == -1) {
        perror("Ошибка получения информации о файле");
        return 1;
    }

    if (file_stat.st_size == 0) {
        printf("Файл '%s' пустой.\n", filename);
        return 0;
    }

    // 4. Открытие файла с помощью системного вызова
    fd = open(filename, O_RDONLY);
    if (fd == -1) {
        perror("Ошибка открытия файла");
        return 1;
    }

    // 5. Чтение и вывод содержимого файла
    printf("\nСодержимое файла '%s':\n", filename);
    while ((bytes_read = read(fd, buffer, BUFFER_SIZE)) > 0) {
        write(STDOUT_FILENO, buffer, bytes_read);
    }

    if (bytes_read == -1) {
        perror("Ошибка чтения файла");
    }

    close(fd);
    return 0;
}